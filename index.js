require("dotenv").config();
const { Client, LocalAuth } = require("whatsapp-web.js");
const qrcode = require("qrcode-terminal");

const witAiMessage = require("./config/wit");
const handleIntent = require("./handlers/intentHandler");

const client = new Client({ 
    authStrategy: new LocalAuth(),
    puppeteer: {
        headless: true,
        args: ['--no-sandbox', '--disable-setuid-sandbox']
    }
});

client.on("qr", (qr) => {
    console.log("ЁЯУ▒ QR Code scan рдХрд░реЗрдВ WhatsApp рдореЗрдВ:");
    qrcode.generate(qr, { small: true });
});

client.on("ready", () => {
    console.log("тЬЕ WhatsApp Bot Successfully Connected!");
    console.log("ЁЯдЦ Bot рдЕрдм messages рдХрд╛ рдЗрдВрддрдЬрд╝рд╛рд░ рдХрд░ рд░рд╣рд╛ рд╣реИ...");
});

client.on("authenticated", () => {
    console.log("ЁЯФР WhatsApp authentication successful!");
});

client.on("auth_failure", () => {
    console.log("тЭМ WhatsApp authentication failed!");
});

client.on("disconnected", (reason) => {
    console.log("ЁЯУ▒ WhatsApp disconnected:", reason);
});

client.on("message", async (msg) => {
    // Ignore group messages and messages from status
    if (msg.from.includes('@g.us') || msg.from.includes('status@broadcast')) {
        return;
    }

    // Ignore messages from bot itself
    if (msg.fromMe) return;

    console.log(`ЁЯУй User (${msg.from}): ${msg.body}`);

    try {
        // Show typing indicator for better UX
        await msg.getChat().then(chat => chat.sendStateTyping());

        const witData = await witAiMessage(msg.body);
        
        if (!witData) {
            const errorMsg = "ЁЯдФ Sorry, рдореБрдЭреЗ рд╕рдордЭрдиреЗ рдореЗрдВ рджрд┐рдХреНрдХрдд рд╣реЛ рд░рд╣реА рд╣реИред рдХреГрдкрдпрд╛ рдереЛрдбрд╝реА рджреЗрд░ рдмрд╛рдж try рдХрд░реЗрдВред";
            return client.sendMessage(msg.from, errorMsg);
        }

        const intent = witData.intents?.[0]?.name || "unknown";
        const entities = witData.entities || {};
        const confidence = witData.intents?.[0]?.confidence || 0;

        console.log("ЁЯСЙ Intent:", intent, "Confidence:", confidence);
        console.log("ЁЯСЙ Entities:", entities);

        // If confidence is too low, ask for clarification
        if (confidence < 0.5 && intent !== "unknown") {
            const clarificationMsg = "ЁЯдФ рдореБрдЭреЗ рдЖрдкрдХрд╛ message рдкреВрд░реА рддрд░рд╣ рд╕рдордЭ рдирд╣реАрдВ рдЖрдпрд╛ред рдХреНрдпрд╛ рдЖрдк рдереЛрдбрд╝рд╛ рдФрд░ clear рдореЗрдВ рдмрддрд╛ рд╕рдХрддреЗ рд╣реИрдВ?";
            return client.sendMessage(msg.from, clarificationMsg);
        }

        const reply = await handleIntent(intent, entities, msg);
        
        // Clear typing and send reply
        await msg.getChat().then(chat => chat.clearState());
        await client.sendMessage(msg.from, reply);
        
        console.log(`ЁЯдЦ Bot Reply: ${reply}`);

    } catch (error) {
        console.error("тЭМ Error processing message:", error);
        const errorReply = "ЁЯШЕ Sorry, рдХреБрдЫ technical issue рд╣реЛ рдЧрдИ рд╣реИред Please try again!";
        client.sendMessage(msg.from, errorReply);
    }
});

// Handle process termination gracefully
process.on('SIGINT', async () => {
    console.log('ЁЯЫС Bot рдХреЛ safely shutdown рдХрд░ рд░рд╣реЗ рд╣реИрдВ...');
    await client.destroy();
    process.exit(0);
});

client.initialize();
